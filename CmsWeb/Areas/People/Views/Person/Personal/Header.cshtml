@using System.Text
@using CmsData
@using CmsWeb.Areas.People.Models
@using UtilityExtensions
@model PersonModel
<h1 id="nameline" class="@(Model.Person.IsDeceased == true ? "alert alert-danger" : "")">
    @Model.Name
</h1>
<ul class="meta list-unstyled">
    <li class="role">
        @ShowAddress(Model.PrimaryAddr)
        @ShowAddress(Model.OtherAddr)
        @ContactLine()
    </li>
    <li class="badges">
        @if (Model.basic.Campus.Items.Count() > 1)
        {
            @Html.DisplayFor(m => m.basic.Campus, "InlineCodeEditCampus", new { label = Util2.CampusLabel, canedit = Model.Person.CanUserEditCampus })
        }


        @Html.DisplayFor(m => m.basic.PositionInFamily, "InlineCode")
        @if (User.IsInRole("Access") || !DbUtil.Db.Setting("HideMyDataMemberBadge"))
        {
            @Badge(true, @Model.MemberStatus, "label-success")
        }
        @foreach (var status in Model.StatusFlags)
        {
            @Badge(Model.MemberStatus != status, status, "label-success")
        }
        @Badge(Model.basic.DoNotVisitFlag, "Do Not Visit", "label-danger")
        @Badge(Model.basic.DoNotCallFlag, "Do Not Call", "label-danger")
        @Badge(Model.basic.DoNotMailFlag, "Do Not Mail", "label-danger")
    </li>
</ul>
@helper ShowAddress(AddressInfo a)
{

    if(a == null)
    {
        <span class="label label-info">No address information available.</span>
    }
    else
    {
        var editHide = Model.Person.CanUserEditFamilyAddress ? "" : "hide";
        if (a.AddressLineOne.HasValue() || a.Preferred)
        {
            var icon = a.Name == "FamilyAddr" ? "fa-home" : "fa-male";
            var addr = a.AddrCityStateZipLine();
            var start = DbUtil.StartAddress;
                <div class="dropdown">
                    <i class="fa @icon fa-fw"></i>
                    <a href="#" class="dropdown-toggle @a.BadAddressClass" data-toggle="dropdown">@addr</a>&nbsp;&nbsp;
                    <a href="/Address/Edit/@a.Name/@Model.PeopleId" class="editaddr @editHide"><i class="fa fa-pencil"></i></a>
                    <ul class="dropdown-menu">
                        <li class="@editHide"><a href="/Address/Edit/@a.Name/@Model.PeopleId" class="editaddr">Edit Address</a></li>
                        <li><a href="http://www.google.com/maps?q=@addr" target="_blank">Google Map</a></li>
                        <li><a href="http://www.bing.com/maps/?q=@addr" target="_blank">Bing Map</a></li>
                        <li><a href='http://www.bing.com/maps/?rtp=adr.@start~adr.@addr' target="_blank">Driving Directions (Bing)</a></li>
                        <li><a href='https://www.google.com/maps/dir/@start.Replace(' ','+')/@addr.Replace(' ', '+')' target="_blank">Driving Directions (Google)</a></li>
                    </ul>
                </div>
        }
    }
}
@helper ContactLine()
{
const string bull = " &bull; ";
var sb = new StringBuilder(Model.Email);
sb.AppendNext(bull, Model.Cell);
sb.AppendNext(bull, Model.HomePhone);
if (sb.Length > 0)
{
        <i class="fa fa-envelope fa-fw"></i>
        <span id="contactline">@Html.Raw(sb)</span>
}
}
@helper Badge(bool tf, string badge, string labeltype)
{
if (tf)
{
        <span class="label @labeltype">@badge</span>
}
}
